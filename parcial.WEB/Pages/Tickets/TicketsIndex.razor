@page "/tickets"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h1>Validar Voleta</h1>


<form onsubmit={{this.validarTicket}}>
    <label>Ingresa el código de la boleta:</label>
    <InputNumber style="width: 280px" class="form-control" @bind-Value="@Id" />
    <button type="button" style="margin-bottom:20px; margin-top:20px;" class="btn btn-primary" @onclick="ValidateID">Validar boleta</button>
    
   

    @if (ticket is null)
    {
    }
    else
    {
        if (valida)
        {
           if (ticket.Used)
        {
          

        }
        else
        {          
                <div class="mb-3">
                    <label></label>
                    <label>Porteria:</label>
                    <div>
                        <select style="margin-top:20px; width: 280px;" class="form-select" @bind="ticket.Entrance">
                            <option value="" selected disabled>eliga una porteria</option>
                                    <option value="Norte">Norte</option>
                                    <option value="Sur">Sur</option>
                                    <option value="Oriental">Oriental</option>
                                    <option value="Occidental">Occidental</option>
                        </select>

                    </div>
                </div>

                <button type="button" class="btn btn-success" @onclick="actualizarTicket">Registrar boleta</button>

        }  
        }
       
    }

</form>

@code {
    public Ticket? ticket;
    bool valida = false;
    public int Id;
    string? date;
    private async Task ValidateID()
    {
        var responseHTTP = await repository.Get<Ticket>($"api/ticket/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("tickets"); 
                await ValidarAsync();
                valida = false;
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            ticket = responseHTTP.Response;

            valida = true;
            if (ticket!.Used)
            {
                //date = ticket.Date.ToString()!;
                date = ticket.Date!.Value.ToString("hh:mm")!;
                var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                    {

                       
                        Title = "Alerta",
                        Text = "boleta usada a las " + date + " por la porteria " + ticket.Entrance,
                        Icon = SweetAlertIcon.Question,                     
                        ConfirmButtonText = "Aceptar"
                    });

            }
        }
    }
    private async Task ValidarAsync()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "boleta no válida!!!",
                Icon = SweetAlertIcon.Question,
                ConfirmButtonText = "Aceptar"
            });

       
    }

    private async Task actualizarTicket()
    {
        ticket!.Date= DateTime.Now;
        ticket.Used = true;
        var responseHTTP = await repository.Put("api/ticket", ticket);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
           
            //navigationManager.NavigateTo("tickets");
        }
    }

}
